/*! *****************************************************************************
    Copyright (c) Activbody Inc. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

import*as tslib_1 from"tslib";import{Subject}from"rxjs";const DeviceUUID={SERVICE:"00005000-0000-1000-8000-00805f9b34fb",READ:"00005a01-0000-1000-8000-00805f9b34fb",WRITE:"00005a02-0000-1000-8000-00805f9b34fb"},DeviceCommands={TVGTIME:"TVGTIME",ISOM:"ISOM!",TARE:"TARE!",STOP:"STOP!"},DeviceState={handshake:"handshake",isometric:"isometric",stop:"stop",disconnected:"disconnected"};export class A5DeviceManager{connect(){return tslib_1.__awaiter(this,void 0,void 0,function*(){if(window.navigator&&window.navigator.bluetooth){const e=yield navigator.bluetooth.requestDevice({filters:[{services:[DeviceUUID.SERVICE]}]}),t=yield e.gatt.connect(),i=yield t.getPrimaryService(DeviceUUID.SERVICE);return new A5Device(e,t,i)}})}}export class A5Device{constructor(e,t,i){this.disconnectEventAsObservable=new Subject,this.isomDataAsObservable=new Subject,this.characteristics=new Map,this.deviceState=DeviceState.disconnected,this.device=e,this.server=t,this.service=i,this.init()}getIsometricData(){return this.isomDataAsObservable.asObservable()}onDisconnect(){return this.disconnectEventAsObservable.asObservable()}startIsometric(){return tslib_1.__awaiter(this,void 0,void 0,function*(){yield this.writeCharacteristicValue(this.formatCommand(DeviceCommands.ISOM)),this.deviceState=DeviceState.isometric;const e=yield this.startNotifications();this.attachIsometricListener(e)})}tare(){this.writeCharacteristicValue(this.formatCommand(DeviceCommands.TARE))}stop(){return tslib_1.__awaiter(this,void 0,void 0,function*(){yield this.writeCharacteristicValue(this.formatCommand(DeviceCommands.STOP)),this.deviceState=DeviceState.stop})}evergreenMode(e){e?this.evergreenModeTimer=window.setInterval(()=>{switch(this.deviceState){case DeviceState.stop:case DeviceState.handshake:this.stop()}},6e4):clearInterval(this.evergreenModeTimer)}disconnect(){this.device.gatt.disconnect()}init(){return tslib_1.__awaiter(this,void 0,void 0,function*(){yield this.cacheCharacteristic(DeviceUUID.READ),yield this.cacheCharacteristic(DeviceUUID.WRITE),yield this.writeCharacteristicValue(this.formatCommand(DeviceCommands.TVGTIME)),this.deviceState=DeviceState.handshake,this.attachDisconnectListener()})}attachDisconnectListener(){this.device.addEventListener("gattserverdisconnected",e=>{this.disconnectEventAsObservable.next(e),this.deviceState=DeviceState.disconnected,this.device=void 0,this.server=void 0,this.service=void 0})}cacheCharacteristic(e){return tslib_1.__awaiter(this,void 0,void 0,function*(){const t=yield this.service.getCharacteristic(e);this.characteristics.set(e,t)})}writeCharacteristicValue(e){return this.characteristics.get(DeviceUUID.WRITE).writeValue(e)}startNotifications(){return this.characteristics.get(DeviceUUID.READ).startNotifications()}attachIsometricListener(e){e.addEventListener("characteristicvaluechanged",e=>{const t=e.target;this.parseData(t.value)})}parseData(e){const t=String.fromCharCode.apply(null,new Uint8Array(e.buffer)).match(/IS(.*)\/IS/)[1];this.isomDataAsObservable.next(t)}formatCommand(e){const t=new ArrayBuffer(e.length+2),i=new DataView(t,0);i.setUint8(0,65);for(let t=0;t<e.length;t++)i.setUint8(t+1,e.charCodeAt(t));return i.setUint8(e.length+1,25),i}}